#Opcode	function	mask	Comment	
#		0b????????		
#		0b????????????????		
#		0b????????????????????????		
#		0b????????????????????????????????		
#HALT (Declaring halt here prevents an overlap warning between LD (HL),r and LD r,(HL)				
HALT	HALT	0b01110110		
HALT	HALT	0b1101110101110110		
HALT	HALT	0b1111110101110110		
#8-Bit load group		mask		
LD r,r'	LD_r_r	0b01??????		
LD r,n	LD_r_n	0b00???110????????		
LD r,(HL)	LD_r_HLp	0b01???110		
LD r,(IX+d)	LD_r_IXYp	0b1101110101???110????????	#DD prefix	
LD r,(IY+d)	LD_r_IXYp	0b1111110101???110????????	#FD prefix	
LD (HL),r	LD_HLp_r	0b01110???		
LD (IX+d),r	LD_IXYp_r	0b1101110101110???????????	#DD prefix	
LD (IY+d),r	LD_IXYp_r	0b1111110101110???????????	#FD prefix	
LD (HL),n	LD_HLp_n	0b00110110????????		
LD (IX+d),n	LD_IXYp_n	0b1101110100110110????????????????	#DD prefix	
LD (IY+d),n	LD_IXYp_n	0b1111110100110110????????????????	#FD prefix	
LD A,(BC)	LD_A_BCp	0b00001010		
LD A,(DE)	LD_A_DEp	0b00011010		
LD A,(nn)	LD_A_nnp	0b00111010????????????????		
LD (BC),A	LD_BCp_A	0b00000010		
LD (DE),A	LD_DEp_A	0b00010010		
LD (nn),A	LD_nnp_A	0b00110010????????????????		
LD A,I	LD_A_I	0b1110110101010111		
LD A,R	LD_A_R	0b1110110101011111		
LD I,A	LD_I_A	0b1110110101000111		
LD R,A	LD_R_A	0b1110110101001111		
#8-bit load, undocumented				
LD IXH,n	LD_IXYH_n	0b1101110100100110????????		
LD IXL,n	LD_IXYL_n	0b1101110100101110????????		
LD IYH,n	LD_IXYH_n	0b1111110100100110????????		
LD IYL,n	LD_IXYL_n	0b1111110100101110????????		
LD r, r' (long)	UNDOC	0b1101110101??????		
LD r, r' (long)	UNDOC	0b1111110101??????		
#16-bit load group				
LD dd,nn	LD_rp_nn	0b00??0001????????????????		
LD IX,nn	LD_IXY_nn	0b1101110100100001????????????????	#DD prefix	
LD IY,nn	LD_IXY_nn	0b1111110100100001????????????????	#FD prefix	
LD HL,(nn)	LD_HL_nnp	0b00101010????????????????		
LD dd,(nn)	LD_rp_nnp	0b1110110101??1011????????????????		
LD IX,(nn)	LD_IXY_nnp	0b1101110100101010????????????????	#DD prefix	
LD IY,(nn)	LD_IXY_nnp	0b1111110100101010????????????????	#FD prefix	
LD (nn),HL	LD_nnp_HL	0b00100010????????????????		
LD (nn),dd	LD_nnp_rp	0b1110110101??0011????????????????		
LD (nn),IX	LD_nnp_IXY	0b1101110100100010????????????????	#DD prefix	
LD (nn),IY	LD_nnp_IXY	0b1111110100100010????????????????	#FD prefix	
LD SP,HL	LD_SP_HL	0b11111001	Ambiguity on datasheet!	
LD SP,IX	LD_SP_IXY	0b1101110111111001	#DD prefix	
LD SP,IY	LD_SP_IXY	0b1111110111111001	#FD prefix	
PUSH qq	PUSH_rp2	0b11??0101		
PUSH IX	PUSH_IXY	0b1101110111100101	#DD prefix	
PUSH IY	PUSH_IXY	0b1111110111100101	#FD prefix	
POP qq	POP_rp2	0b11??0001		
POP IX	POP_IXY	0b1101110111100001		
POP IY	POP_IXY	0b1111110111100001		
#Exchange, block transfer, and search group				
EX DE,HL	EX_DE_HL	0b11101011		
EX AF,AF'	EX	0b00001000		
EXX	EXX	0b11011001		
EX (SP),HL	EX_SPp_HL	0b11100011		
EX (SP),IX	EX_SPp_IXY	0b1101110111100011	#DD prefix	
EX (SP),IY	EX_SPp_IXY	0b1111110111100011	#FD prefix	
LDI	LDI	0b1110110110100000		
LDIR	LDIR	0b1110110110110000		
LDD	LDD	0b1110110110101000		
LDDR	LDDR	0b1110110110111000		
CPI	CPI	0b1110110110100001	Ambiguity on datasheet!	
CPIR	CPIR	0b1110110110110001		
CPD	CPD	0b1110110110101001		
CPDR	CPDR	0b1110110110111001		
#8-Bit arithmetic				
ADD A,r	ADD_r	0b10000???		
ADD A,n	ADD_n	0b11000110????????		
ADD A,(HL)	ADD_HLp	0b10000110		
ADD A,(IX+d)	ADD_IXYp	0b1101110110000110????????	#DD prefix	
ADD A,(IY+d)	ADD_IXYp	0b1111110110000110????????	#FD prefix	
ADC A,r	ADC_r	0b10001???		
ADC A,n	ADC_n	0b11001110????????		
ADC A,(HL)	ADC_HLp	0b10001110		
ADC A,(IX+d)	ADC_IXYp	0b1101110110001110????????	#DD prefix	
ADC A,(IY+d)	ADC_IXYp	0b1111110110001110????????	#FD prefix	
SUB A,r	SUB_r	0b10010???		
SUB A,n	SUB_n	0b11010110????????		
SUB A,(HL)	SUB_HLp	0b10010110		
SUB A,(IX+d)	SUB_IXYp	0b1101110110010110????????	#DD prefix	
SUB A,(IY+d)	SUB_IXYp	0b1111110110010110????????	#FD prefix	
SBC A,r	SBC_r	0b10011???		
SBC A,n	SBC_n	0b11011110????????		
SBC A,(HL)	SBC_HLp	0b10011110		
SBC A,(IX+d)	SBC_IXYp	0b1101110110011110????????	#DD prefix	
SBC A,(IY+d)	SBC_IXYp	0b1111110110011110????????	#FD prefix	
AND A,r	AND_r	0b10100???		
AND A,n	AND_n	0b11100110????????		
AND A,(HL)	AND_HLp	0b10100110		
AND A,(IX+d)	AND_IXYp	0b1101110110100110????????	#DD prefix	
AND A,(IY+d)	AND_IXYp	0b1111110110100110????????	#FD prefix	
OR A,r	OR_r	0b10110???	Ambiguity on datasheet! (XOR/OR)	
OR A,n	OR_n	0b11110110????????	Ambiguity on datasheet! (XOR/OR)	
OR A,(HL)	OR_HLp	0b10110110	Ambiguity on datasheet! (XOR/OR)	
OR A,(IX+d)	OR_IXYp	0b1101110110110110????????	Ambiguity on datasheet! (XOR/OR)	#DD prefix
OR A,(IY+d)	OR_IXYp	0b1111110110110110????????	Ambiguity on datasheet! (XOR/OR)	#FD prefix
XOR A,r	XOR_r	0b10101???	Ambiguity on datasheet! (XOR/OR)	
XOR A,n	XOR_n	0b11101110????????	Ambiguity on datasheet! (XOR/OR)	
XOR A,(HL)	XOR_HLp	0b10101110	Ambiguity on datasheet! (XOR/OR)	
XOR A,(IX+d)	XOR_IXYp	0b1101110110110101????????	Ambiguity on datasheet! (XOR/OR)	#DD prefix
XOR A,(IY+d)	XOR_IXYp	0b1111110110110101????????	Ambiguity on datasheet! (XOR/OR)	#FD prefix
CP A,r	CP_r	0b10111???		
CP A,n	CP_n	0b11111110????????		
CP (HL)	CP_HLp	0b10111110		
CP (IX+d)	CP_IXYp	0b1101110110111110????????	#DD prefix	
CP (IY+d)	CP_IXYp	0b1111110110111110????????	#FD prefix	
INC r	INC_r	0b00???100		
INC (HL)	INC_HLp	0b00110100		
INC (IX+d)	INC_IXYp	0b1101110100110100????????	#DD prefix	
INC (IY+d)	INC_IXYp	0b1111110100110100????????	#FD prefix	
DEC r	DEC_r	0b00???101		
DEC (HL)	DEC_HLp	0b00110101		
DEC (IX+d)	DEC_IXYp	0b1101110100110101????????	#DD prefix	
DEC (IY+d)	DEC_IXYp	0b1111110100110101????????	#FD prefix	
#8-Bit arithmetic (Undocumented)				
INC IXH	UNDOC	0b1101110100100100		
INC IYH	UNDOC	0b1111110100100100		
INC IXL	UNDOC	0b1101110100101100		
INC IYL	UNDOC	0b1111110100101100		
DEC IXH	UNDOC	0b1101110100100101		
DEC IYH	UNDOC	0b1111110100100101		
DEC IXL	UNDOC	0b1101110100101101		
DEC IYL	UNDOC	0b1111110100101101		
#General purpose arithmetic and CPU control groups				
DAA	DAA	0b00100111		
CPL	CPL	0b00101111		
NEG	NEG	0b1110110101???100		
CCF	CCF	0b00111111		
SCF	SCF	0b00110111		
NOP	NOP	0b00000000		
DI	DI	0b11110011		
EI	EI	0b11111011		
IM 0	IM	0b1110110101?0?110		
IM 1	IM	0b1110110101?10110		
IM 2	IM	0b1110110101?11110		
#16-bit arithmetic group				
ADD HL,ss	ADD_HL_rp	0b00??1001		
ADD IX,pp	ADD_IXY_rp	0b1101110100??1001	#DD prefix	
ADD IY,pp	ADD_IXY_rp	0b1111110100??1001	#FD prefix	
ADC HL,ss	ADC_HL_rp	0b1110110101??1010	Missing IX/IY version?	
SBC HL,ss	SBC_HL_rp	0b1110110101??0010	Missing IX/IY version?	
INC ss	INC_rp	0b00??0011		
INC IX	INC_IXY	0b1101110100100011	#DD prefix	
INC IY	INC_IXY	0b1111110100100011	#FD prefix	
DEC ss	DEC_rp	0b00??1011		
DEC IX	DEC_IXY	0b1101110100101011	#DD prefix	
DEC IY	DEC_IXY	0b1111110100101011	#FD prefix	
#Rotate and shift group				
RLCA	RLCA	0b00000111		
RLA	RLA	0b00010111		
RRCA	RRCA	0b00001111		
RRA	RRA	0b00011111		
SLL r	SLL_r	0b1100101100000???	Duplicated?	
SLL (HL)	SLL_HLp	0b1100101100000110	Duplicated?	
SLL (IX+d)	SLL_IXYp	0b1101110111001011????????00000110	Duplicated?	#DD prefix
SLL (IY+d)	SLL_IXYp	0b1111110111001011????????00000110	Duplicated?	#FD prefix
RL r	RL_r	0b1100101100010???		
RL (HL)	RL_HLp	0b1100101100010110		
RL (IX+d)	RL_IXYp	0b1101110111001011????????00010110	#DD prefix	
RL (IY+d)	RL_IXYp	0b1111110111001011????????00010110	#FD prefix	
RRC r	RRC_r	0b1100101100001???		
RRC (HL)	RRC_HLp	0b1100101100001110		
RRC (IX+d)	RRC_IXYp	0b1101110111001011????????00001110	#DD prefix	
RRC (IY+d)	RRC_IXYp	0b1111110111001011????????00001110	#FD prefix	
RR r	RR_r	0b1100101100011???		
RR (HL)	RR_HLp	0b1100101100011110		
RR (IX+d)	RR_IXYp	0b1101110111001011????????00011110	#DD prefix	
RR (IY+d)	RR_IXYp	0b1111110111001011????????00011110	#FD prefix	
SLA r	SLA_r	0b1100101100100???	Ambiguity on datasheet! SRA r	
SLA (HL)	SLA_HLp	0b1100101100100110		
SLA (IX+d)	SLA_IXYp	0b1101110111001011????????00100110	#DD prefix	
SLA (IY+d)	SLA_IXYp	0b1111110111001011????????00100110	#FD prefix	
SRA r	SRA_r	0b1100101100101???	Ambiguity on datasheet! SLA r	
SRA (HL)	SRA_HLp	0b1100101100101110		
SRA (IX+d)	SRA_IXYp	0b1101110111001011????????00101110	#DD prefix	
SRA (IY+d)	SRA_IXYp	0b1111110111001011????????00101110	#FD prefix	
SRL r	SRL_r	0b1100101100111???		
SRL (HL)	SRL_HLp	0b1100101100111110		
SRL (IX+d)	SRL_IXYp	0b1101110111001011????????00111110	#DD prefix	
SRL (IY+d)	SRL_IXYp	0b1111110111001011????????00111110	#FD prefix	
RLD	RLD	0b1110110101101111		
RRD	RRD	0b1110110101100111		
#Bit set, reset and test group				
BIT b,r	BIT_b_r	0b1100101101??????		
BIT b,(HL)	BIT_b_HLp	0b1100101101???110		
BIT b,(IX+d)	BIT_b_IXYp	0b1101110111001011????????01???110	#DD prefix	
BIT b,(IY+d)	BIT_b_IXYp	0b1111110111001011????????01???110	#FD prefix	
SET b,r	SET_b_r	0b1100101111??????		
SET b,(HL)	SET_b_HLp	0b1100101111???110	Ambiguity on datasheet!	
SET b,(IX+d)	SET_b_IXYp	0b1101110111001011????????11???110	Ambiguity on datasheet!	#DD prefix
SET b,(IY+d)	SET_b_IXYp	0b1111110111001011????????11???110		#FD prefix
RES b,r	RES_b_r	0b1100101110??????		
RES b,(HL)	RES_b_HLp	0b1100101110???110		
RES b,(IX+d)	RES_b_IXYp	0b1101110111001011????????10???110	#DD prefix	
RES b,(IY+d)	RES_b_IXYp	0b1111110111001011????????10???110	#FD prefix	
#Jump group				
JP nn	JP_nn	0b11000011????????????????		
JP cc,nn	JP_cc_nn	0b11???010????????????????		
JR d	JR_d	0b00011000????????		
JR C,d	JR_cc_d	0b00111000????????		
JR NC,d	JR_cc_d	0b00110000????????		
JR Z,d	JR_cc_d	0b00101000????????		
JR NZ,d	JR_cc_d	0b00100000????????		
JP (HL)	JP_HLp	0b11101001		
JP (IX)	JP_IXYp	0b1101110111101001	#DD prefix	
JP (IY)	JP_IXYp	0b1111110111101001	#FD prefix	
DJNZ d	DJNZ_d	0b00010000????????		
#Call and return group				
CALL nn	CALL_nn	0b11001101????????????????		
CALL cc,nn	CALL_cc_nn	0b11???100????????????????		
RET	RET	0b11001001		
RET cc	RET_cc	0b11???000		
RETI	RETI	0b1110110101??1101		
RETN	RETN	0b1110110101??0101		
RST y	RST_y	0b11???111		
#Input/output group				
IN A,(n)	IN_A_np	0b11011011????????		
IN r,(C)	IN_r_Cp	0b1110110101???000		
INI	INI	0b1110110110100010		
INIR	INIR	0b1110110110110010		
IND	IND	0b1110110110101010		
INDR	INDR	0b1110110110111010		
OUT (n),A	OUT_np_A	0b11010011????????		
OUT (C),r	OUT_Cp_r	0b1110110101???001		
OUTI	OUTI	0b1110110110100011		
OTIR	OTIR	0b1110110110110011		
OUTD	OUTD	0b1110110110101011		
OTDR	OTDR	0b1110110110111011		
#Undocumented opcodes				
SLL r	SLL_r	0b1100101100110???	#Undocumented(?) Duplicated?	
SLL (HL)	SLL_HLp	0b1100101100110110	#Undocumented(?) Duplicated?	
SLL (IX+d)	UNDOC	0b1101110111001011????????00110110	#Undocumented(?) Duplicated?	
SLL (IY+d)	UNDOC	0b1111110111001011????????00110110	#Undocumented(?) Duplicated?	
LD r; rot (IX+d)	UNDOC	0b1101110111001011????????00??????		
LD r; rot (IY+d)	UNDOC	0b1111110111001011????????00??????		
LD r; RES y,(IX+d)	UNDOC	0b1101110111001011????????10??????		
LD r; RES y,(IY+d)	UNDOC	0b1111110111001011????????10??????		
LD r; SET y,(IX+d)	UNDOC	0b1101110111001011????????11??????		
LD r; SET y,(IY+d)	UNDOC	0b1111110111001011????????11??????		
BIT b,r	UNDOC	0b1101110111001011????????01??????	#Longer version of BIT b,r	
BIT b,r	UNDOC	0b1111110111001011????????01??????	#Longer version of BIT b,r	
NONI/NOP	NOP	0b1111110100000000	#Longer version of NOP	
NONI/NOP	NOP	0b1101110100000000	#Longer version of NOP	
NONI/NOP	NOP	0b11101101????????	#Longer version of NOP (Unsafe)	
# Code prefix and postfix				
!PREFIX	#ifndef __Z80_DECODER_TABLES			
!PREFIX	#define __Z80_DECODER_TABLES			
!PREFIX				
!PREFIX	// --------------------------------------------------			
!PREFIX	// ---          DO NOT ALTER THIS FILE!!          ---			
!PREFIX	// --------------------------------------------------			
!PREFIX	// --- Decoder tables are automatically generated ---			
!PREFIX	// --- by 'z80_make_decoder_tables.py'            ---			
!PREFIX	// --------------------------------------------------			
!PREFIX				
!PREFIX	#include "z80_opcodes.h"			
!PREFIX				
!PREFIX	struct opcode_dec_s{			
!PREFIX	  int (*f)();			
!PREFIX	  signed char size;			
!PREFIX	};			
!PREFIX	typedef struct opcode_dec_s opcode_dec_t;			
!PREFIX				
!POSTFIX				
!POSTFIX	#endif			
!TYPE	opcode_dec_t			
