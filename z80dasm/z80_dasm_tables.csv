#Opcode	function	mask	Comment	
#		0b????????		
#		0b????????????????		
#		0b????????????????????????		
#		0b????????????????????????????????		
#HALT (Declaring halt here prevents an overlap warning between LD (HL),r and LD r,(HL)				
HALT	zd_HALT	0b01110110		
HALT	zd_HALT	0b1101110101110110		
HALT	zd_HALT	0b1111110101110110		
#8-Bit load group		mask		
LD r,r'	zd_LD_r_r	0b01??????		
LD r,n	zd_LD_r_n	0b00???110????????		
LD r,(IX+d)	zd_LD_r_IXYp	0b1101110101???110????????	#DD prefix	
LD r,(IY+d)	zd_LD_r_IXYp	0b1111110101???110????????	#FD prefix	
LD (IX+d),r	zd_LD_IXYp_r	0b1101110101110???????????	#DD prefix	
LD (IY+d),r	zd_LD_IXYp_r	0b1111110101110???????????	#FD prefix	
LD (IX+d),n	zd_LD_IXYp_n	0b1101110100110110????????????????	#DD prefix	
LD (IY+d),n	zd_LD_IXYp_n	0b1111110100110110????????????????	#FD prefix	
LD A,(BC)	zd_LD_A_BCp	0b00001010		
LD A,(DE)	zd_LD_A_DEp	0b00011010		
LD A,(nn)	zd_LD_A_nnp	0b00111010????????????????		
LD (BC),A	zd_LD_BCp_A	0b00000010		
LD (DE),A	zd_LD_DEp_A	0b00010010		
LD (nn),A	zd_LD_nnp_A	0b00110010????????????????		
LD A,I	zd_LD_A_I	0b1110110101010111		
LD A,R	zd_LD_A_R	0b1110110101011111		
LD I,A	zd_LD_I_A	0b1110110101000111		
LD R,A	zd_LD_R_A	0b1110110101001111		
#8-bit load, undocumented				
LD IXH,n	zd_LD_IXYH_n	0b1101110100100110????????		
LD IXL,n	zd_LD_IXYL_n	0b1101110100101110????????		
LD IYH,n	zd_LD_IXYH_n	0b1111110100100110????????		
LD IYL,n	zd_LD_IXYL_n	0b1111110100101110????????		
LD r,r' (long)	zd_LD_r_r_undoc	0b1101110101??????		
LD r,r' (long)	zd_LD_r_r_undoc	0b1111110101??????		
#16-bit load group				
LD dd,nn	zd_LD_rp_nn	0b00??0001????????????????		
LD IX,nn	zd_LD_IXY_nn	0b1101110100100001????????????????	#DD prefix	
LD IY,nn	zd_LD_IXY_nn	0b1111110100100001????????????????	#FD prefix	
LD HL,(nn)	zd_LD_HL_nnp	0b00101010????????????????		
LD dd,(nn)	zd_LD_rp_nnp	0b1110110101??1011????????????????		
LD IX,(nn)	zd_LD_IXY_nnp	0b1101110100101010????????????????	#DD prefix	
LD IY,(nn)	zd_LD_IXY_nnp	0b1111110100101010????????????????	#FD prefix	
LD (nn),HL	zd_LD_nnp_HL	0b00100010????????????????		
LD (nn),dd	zd_LD_nnp_rp	0b1110110101??0011????????????????		
LD (nn),IX	zd_LD_nnp_IXY	0b1101110100100010????????????????	#DD prefix	
LD (nn),IY	zd_LD_nnp_IXY	0b1111110100100010????????????????	#FD prefix	
LD SP,HL	zd_LD_SP_HL	0b11111001	Ambiguity on datasheet!	
LD SP,IX	zd_LD_SP_IXY	0b1101110111111001	#DD prefix	
LD SP,IY	zd_LD_SP_IXY	0b1111110111111001	#FD prefix	
PUSH qq	zd_PUSH_rp2	0b11??0101		
PUSH IX	zd_PUSH_IXY	0b1101110111100101	#DD prefix	
PUSH IY	zd_PUSH_IXY	0b1111110111100101	#FD prefix	
POP qq	zd_POP_rp2	0b11??0001		
POP IX	zd_POP_IXY	0b1101110111100001		
POP IY	zd_POP_IXY	0b1111110111100001		
#Exchange, block transfer, and search group				
EX DE,HL	zd_EX_DE_HL	0b11101011		
EX AF,AF'	zd_EX	0b00001000		
EXX	zd_EXX	0b11011001		
EX (SP),HL	zd_EX_SPp_HL	0b11100011		
EX (SP),IX	zd_EX_SPp_IXY	0b1101110111100011	#DD prefix	
EX (SP),IY	zd_EX_SPp_IXY	0b1111110111100011	#FD prefix	
Block transfer group	zd_bli	0b1110110110??????		
#8-Bit arithmetic				
alu A,r	zd_alu_r	0b10??????		
alu A,n	zd_alu_n	0b11???110????????		
alu A,(IX+d)	zd_alu_IXYp	0b1101110110???110????????	#DD prefix	
alu A,(IY+d)	zd_alu_IXYp	0b1111110110???110????????	#FD prefix	
INC r	zd_INC_r	0b00???100		
INC (IX+d)	zd_INC_IXYp	0b1101110100110100????????	#DD prefix	
INC (IY+d)	zd_INC_IXYp	0b1111110100110100????????	#FD prefix	
DEC r	zd_DEC_r	0b00???101		
DEC (IX+d)	zd_DEC_IXYp	0b1101110100110101????????	#DD prefix	
DEC (IY+d)	zd_DEC_IXYp	0b1111110100110101????????	#FD prefix	
alu A,r (IX set)	zd_alu_r_undoc	0b1101110110??????		
alu A,r (IY set)	zd_alu_r_undoc	0b1111110110??????		
#General purpose arithmetic and CPU control groups				
DAA	zd_DAA	0b00100111		
CPL	zd_CPL	0b00101111		
NEG	zd_NEG	0b1110110101???100		
CCF	zd_CCF	0b00111111		
SCF	zd_SCF	0b00110111		
NOP	zd_NOP	0b00000000		
DI	zd_DI	0b11110011		
EI	zd_EI	0b11111011		
IM 0	zd_IM	0b1110110101?0?110		
IM 1	zd_IM	0b1110110101?10110		
IM 2	zd_IM	0b1110110101?11110		
#16-bit arithmetic group				
ADD HL,ss	zd_ADD_HL_rp	0b00??1001		
ADD IX,pp	zd_ADD_IXY_rp	0b1101110100??1001	#DD prefix	
ADD IY,pp	zd_ADD_IXY_rp	0b1111110100??1001	#FD prefix	
ADC HL,ss	zd_ADC_HL_rp	0b1110110101??1010	Missing IX/IY version?	
SBC HL,ss	zd_SBC_HL_rp	0b1110110101??0010	Missing IX/IY version?	
INC ss	zd_INC_rp	0b00??0011		
INC IX	zd_INC_IXY	0b1101110100100011	#DD prefix	
INC IY	zd_INC_IXY	0b1111110100100011	#FD prefix	
DEC ss	zd_DEC_rp	0b00??1011		
DEC IX	zd_DEC_IXY	0b1101110100101011	#DD prefix	
DEC IY	zd_DEC_IXY	0b1111110100101011	#FD prefix	
#Assorted operations on accumulator/flags				
RLCA	zd_RLCA	0b00000111		
RLA	zd_RLA	0b00010111		
RRCA	zd_RRCA	0b00001111		
RRA	zd_RRA	0b00011111		
RLD	zd_RLD	0b1110110101101111		
RRD	zd_RRD	0b1110110101100111		
#Rotate and shift group				
rotate and shift	zd_rot	0b1100101100??????		
rotate and shift (IX)	zd_rot_IXYp	0b1101110111001011????????00???110		
rotate and shift (IY)	zd_rot_IXYp	0b1111110111001011????????00???110		
#Bit set, reset and test group				
BIT b,r	zd_BIT_b_r	0b1100101101??????		
BIT b,(IX+d)	zd_BIT_b_IXYp	0b1101110111001011????????01???110	#DD prefix	
BIT b,(IY+d)	zd_BIT_b_IXYp	0b1111110111001011????????01???110	#FD prefix	
SET b,r	zd_SET_b_r	0b1100101111??????		
SET b,(IX+d)	zd_SET_b_IXYp	0b1101110111001011????????11???110	Ambiguity on datasheet!	#DD prefix
SET b,(IY+d)	zd_SET_b_IXYp	0b1111110111001011????????11???110		#FD prefix
RES b,r	zd_RES_b_r	0b1100101110??????		
RES b,(IX+d)	zd_RES_b_IXYp	0b1101110111001011????????10???110	#DD prefix	
RES b,(IY+d)	zd_RES_b_IXYp	0b1111110111001011????????10???110	#FD prefix	
#Jump group				
JP nn	zd_JP_nn	0b11000011????????????????		
JP cc,nn	zd_JP_cc_nn	0b11???010????????????????		
JR d	zd_JR_d	0b00011000????????		
JR C,d	zd_JR_cc_d	0b00111000????????		
JR NC,d	zd_JR_cc_d	0b00110000????????		
JR Z,d	zd_JR_cc_d	0b00101000????????		
JR NZ,d	zd_JR_cc_d	0b00100000????????		
JP (HL)	zd_JP_HLp	0b11101001		
JP (IX)	zd_JP_IXYp	0b1101110111101001	#DD prefix	
JP (IY)	zd_JP_IXYp	0b1111110111101001	#FD prefix	
DJNZ d	zd_DJNZ_d	0b00010000????????		
#Call and return group				
CALL nn	zd_CALL_nn	0b11001101????????????????		
CALL cc,nn	zd_CALL_cc_nn	0b11???100????????????????		
RET	zd_RET	0b11001001		
RET cc	zd_RET_cc	0b11???000		
RETI	zd_RETI	0b1110110101??1101		
RETN	zd_RETN	0b1110110101??0101		
RST y	zd_RST_y	0b11???111		
#Input/output group				
IN A,(n)	zd_IN_A_np	0b11011011????????		
IN r,(C)	zd_IN_r_Cp	0b1110110101???000		
OUT (n),A	zd_OUT_np_A	0b11010011????????		
OUT (C),r	zd_OUT_Cp_r	0b1110110101???001		
#Undocumented opcodes				
LD r; rot (IX+d)	zd_LD_ROT	0b1101110111001011????????00??????		
LD r; rot (IY+d)	zd_LD_ROT	0b1111110111001011????????00??????		
LD r; RES y,(IX+d)	zd_LD_RES	0b1101110111001011????????10??????		
LD r; RES y,(IY+d)	zd_LD_RES	0b1111110111001011????????10??????		
LD r; SET y,(IX+d)	zd_LD_SET	0b1101110111001011????????11??????		
LD r; SET y,(IY+d)	zd_LD_SET	0b1111110111001011????????11??????		
BIT b,r	zd_BIT_b_r	0b1101110111001011????????01??????	#Longer version of BIT b,r	
BIT b,r	zd_BIT_b_r	0b1111110111001011????????01??????	#Longer version of BIT b,r	
NONI/NOP	zd_NOP	0b1111110100000000	#Longer version of NOP	
NONI/NOP	zd_NOP	0b1101110100000000	#Longer version of NOP	
NONI/NOP	zd_NOP	0b11101101????????	#Longer version of NOP (Unsafe)	
# Code prefix and postfix				
!PREFIX	#ifndef __Z80_DASM_TABLES			
!PREFIX	#define __Z80_DASM_TABLES			
!PREFIX				
!PREFIX	// --------------------------------------------------			
!PREFIX	// ---          DO NOT ALTER THIS FILE!!          ---			
!PREFIX	// --------------------------------------------------			
!PREFIX	// --- Disasm tables are automatically generated  ---			
!PREFIX	// --- by 'z80_make_decoder_tables.py'            ---			
!PREFIX	// --------------------------------------------------			
!PREFIX				
!PREFIX	#include "z80_dasm.h"			
!PREFIX	#include <stdint.h>			
!PREFIX				
!PREFIX	struct opcode_dasm_s{			
!PREFIX	  z80d_opcode (*f)(const uint8_t *);			
!PREFIX	  signed char size;			
!PREFIX	};			
!PREFIX	typedef struct opcode_dasm_s opcode_dasm_t;			
!PREFIX				
!POSTFIX				
!POSTFIX	#endif			
!TYPE	opcode_dasm_t			
